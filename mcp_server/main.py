# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:51:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

from models import (
    JsonEmailYOURAPIKEYHEREUSEREMAILHEREGetResponse,
    JsonEmailYOURAPIKEYHEREUSEREMAILHEREGetResponse1,
    JsonPhoneYOURAPIKEYHEREUSERPHONEHEREGetResponse,
    JsonPhoneYOURAPIKEYHEREUSERPHONEHEREGetResponse1,
    JsonUrlYOURAPIKEYHEREURLHEREGetResponse,
    JsonUrlYOURAPIKEYHEREURLHEREGetResponse1,
)

app = MCPProxy(
    contact={},
    title='IPQualityScore API',
    version='1.0.0',
    servers=[{'url': 'https://ipqualityscore.com/api'}],
)


@app.get(
    '/json/email/{YOUR_API_KEY_HERE}/{USER_EMAIL_HERE}',
    description=""" Email Validation """,
    tags=['email_format_verification'],
)
def email_validation(
    y_o_u_r__a_p_i__k_e_y__h_e_r_e: str = Path(..., alias='YOUR_API_KEY_HERE'),
    u_s_e_r__e_m_a_i_l__h_e_r_e: str = Path(..., alias='USER_EMAIL_HERE'),
):
    """
    Email Validation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/json/phone/{YOUR_API_KEY_HERE}/{USER_PHONE_HERE}',
    description=""" Phone Validation """,
    tags=['telephone_format_validation'],
)
def phone_validation(
    country: Optional[str] = None,
    y_o_u_r__a_p_i__k_e_y__h_e_r_e: str = Path(..., alias='YOUR_API_KEY_HERE'),
    u_s_e_r__p_h_o_n_e__h_e_r_e: str = Path(..., alias='USER_PHONE_HERE'),
):
    """
    Phone Validation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/json/url/{YOUR_API_KEY_HERE}/{URL_HERE}',
    description=""" Malicious URL Scanner """,
    tags=['url_vulnerability_assessment'],
)
def malicious_url_scanner(
    y_o_u_r__a_p_i__k_e_y__h_e_r_e: str = Path(..., alias='YOUR_API_KEY_HERE'),
    u_r_l__h_e_r_e: str = Path(..., alias='URL_HERE'),
):
    """
    Malicious URL Scanner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
